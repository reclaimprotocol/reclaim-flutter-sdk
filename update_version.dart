// ignore_for_file: avoid_print

import 'dart:io';

void main(List<String> args) {
  try {
    if (args.isEmpty) {
      print('Error: Version number is required.');
      print('Usage: dart update_changelog.dart <version>');
      exit(1);
    }

    final version = args[0];
    if (!RegExp(r'^\d+\.\d+\.\d+$').hasMatch(version)) {
      print('Error: Version must be in format X.Y.Z (e.g., 1.0.0)');
      exit(1);
    }

    // Read CHANGELOG.md
    final changelogFile = File('CHANGELOG.md');

    // Create new changelog entry
    final newEntry = '''
## [$version] - ${DateTime.now().toIso8601String().split('T')[0]}

- TODO: Add release notes.
''';

    // Write new content (this will overwrite existing content)
    changelogFile.writeAsStringSync(newEntry.trim());
    print('CHANGELOG.md updated with version $version.');

    // Update SDK version file
    final sdkVersionFile = File('lib/utils/sdk_version.dart');
    final sdkVersionContent = '''
// This file is automatically generated. DO NOT EDIT BY HAND.

/// Current SDK version
const String reclaimSdkVersion = 'flutter-$version';
''';

    sdkVersionFile.writeAsStringSync(sdkVersionContent);
    print('sdk_version.dart updated with version $version.');

    // Update pubspec.yaml
    final pubspecFile = File('pubspec.yaml');
    final pubspecContent = pubspecFile.readAsStringSync();
    final updatedPubspecContent = pubspecContent.replaceFirst(
        RegExp(r'version: \d+\.\d+\.\d+'), 'version: $version');
    pubspecFile.writeAsStringSync(updatedPubspecContent);
    print('pubspec.yaml updated with version $version.');
  } catch (e) {
    print('Error updating files: $e');
    exit(1);
  }
}
